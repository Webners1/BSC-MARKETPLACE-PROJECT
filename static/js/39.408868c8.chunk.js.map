{"version":3,"sources":["views/Nft/market/Collections/index.tsx"],"names":["ITEMS_PER_PAGE","SORT_FIELD","PageButtons","styled","div","Arrow","theme","colors","primary","Collectible","t","useTranslation","collections","useGetCollections","isMobile","useMatchBreakpoints","useState","sortField","setSortField","sortDirection","setSortDirection","page","setPage","maxPage","setMaxPage","useEffect","extraPages","collectionValues","Object","values","length","Math","floor","sortedCollections","useMemo","sort","a","b","parseFloat","slice","handleSort","useCallback","newField","arrow","field","as","scale","color","textAlign","style","cursor","onClick","map","collection","volume","totalVolumeBNB","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","to","nftsBaseUrl","address","alignItems","src","avatar","width","height","mr","name","ml","numberTokensListed","totalSupply"],"mappings":"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","file":"static/js/39.408868c8.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport {\r\n  Table,\r\n  Th,\r\n  Td,\r\n  Card,\r\n  Flex,\r\n  BnbUsdtPairTokenIcon,\r\n  Heading,\r\n  useMatchBreakpoints,\r\n  ProfileAvatar,\r\n  ArrowBackIcon,\r\n  Text,\r\n  ArrowForwardIcon,\r\n} from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport { useGetCollections } from 'state/nftMarket/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/Layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\n\r\nexport const ITEMS_PER_PAGE = 10\r\n\r\nconst SORT_FIELD = {\r\n  volumeBNB: 'totalVolumeBNB',\r\n  items: 'numberTokensListed',\r\n  supply: 'totalSupply',\r\n}\r\n\r\nexport const PageButtons = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 0.2em;\r\n  margin-bottom: 1.2em;\r\n`\r\n\r\nexport const Arrow = styled.div`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  padding: 0 20px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst Collectible = () => {\r\n  const { t } = useTranslation()\r\n  const collections = useGetCollections()\r\n  const { isMobile } = useMatchBreakpoints()\r\n  const [sortField, setSortField] = useState(null)\r\n  const [sortDirection, setSortDirection] = useState<boolean>(false)\r\n  const [page, setPage] = useState(1)\r\n  const [maxPage, setMaxPage] = useState(1)\r\n\r\n  useEffect(() => {\r\n    let extraPages = 1\r\n    const collectionValues = collections ? Object.values(collections) : []\r\n    if (collectionValues.length % ITEMS_PER_PAGE === 0) {\r\n      extraPages = 0\r\n    }\r\n    setMaxPage(Math.floor(collectionValues.length / ITEMS_PER_PAGE) + extraPages)\r\n  }, [collections])\r\n\r\n  const sortedCollections = useMemo(() => {\r\n    const collectionValues = collections ? Object.values(collections) : []\r\n\r\n    return collectionValues\r\n      .sort((a, b) => {\r\n        if (sortField && a && b) {\r\n          return parseFloat(a[sortField]) > parseFloat(b[sortField])\r\n            ? (sortDirection ? -1 : 1) * 1\r\n            : (sortDirection ? -1 : 1) * -1\r\n        }\r\n        return -1\r\n      })\r\n      .slice(ITEMS_PER_PAGE * (page - 1), page * ITEMS_PER_PAGE)\r\n  }, [page, collections, sortDirection, sortField])\r\n\r\n  const handleSort = useCallback(\r\n    (newField: string) => {\r\n      setSortField(newField)\r\n      setSortDirection(sortField !== newField ? true : !sortDirection)\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  const arrow = useCallback(\r\n    (field: string) => {\r\n      const directionArrow = !sortDirection ? '↑' : '↓'\r\n      return sortField === field ? directionArrow : ''\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\r\n          {t('Collections')}\r\n        </Heading>\r\n      </PageHeader>\r\n      <Page>\r\n        <Card>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <Th textAlign=\"left\">{t('Collection')}</Th>\r\n                <Th textAlign=\"left\" style={{ cursor: 'pointer' }} onClick={() => handleSort(SORT_FIELD.volumeBNB)}>\r\n                  {t('Volume')}\r\n                  {arrow(SORT_FIELD.volumeBNB)}\r\n                </Th>\r\n                {!isMobile && (\r\n                  <>\r\n                    <Th textAlign=\"left\" style={{ cursor: 'pointer' }} onClick={() => handleSort(SORT_FIELD.items)}>\r\n                      {t('Items')}\r\n                      {arrow(SORT_FIELD.items)}\r\n                    </Th>\r\n                    <Th textAlign=\"left\" style={{ cursor: 'pointer' }} onClick={() => handleSort(SORT_FIELD.supply)}>\r\n                      {t('Supply')}\r\n                      {arrow(SORT_FIELD.supply)}\r\n                    </Th>\r\n                  </>\r\n                )}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {sortedCollections.map((collection) => {\r\n                const volume = collection.totalVolumeBNB\r\n                  ? parseFloat(collection.totalVolumeBNB).toLocaleString(undefined, {\r\n                      minimumFractionDigits: 3,\r\n                      maximumFractionDigits: 3,\r\n                    })\r\n                  : '0'\r\n                return (\r\n                  <tr key={collection.address}>\r\n                    <Td>\r\n                      <Link to={`${nftsBaseUrl}/collections/${collection.address}`}>\r\n                        <Flex alignItems=\"center\">\r\n                          <ProfileAvatar src={collection.avatar} width={48} height={48} mr=\"16px\" />\r\n                          {collection.name}\r\n                        </Flex>\r\n                      </Link>\r\n                    </Td>\r\n                    <Td>\r\n                      <Flex alignItems=\"center\">\r\n                        {volume}\r\n                        <BnbUsdtPairTokenIcon ml=\"8px\" />\r\n                      </Flex>\r\n                    </Td>\r\n                    {!isMobile && (\r\n                      <>\r\n                        <Td>{collection.numberTokensListed}</Td>\r\n                        <Td>{collection.totalSupply}</Td>\r\n                      </>\r\n                    )}\r\n                  </tr>\r\n                )\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n          <PageButtons>\r\n            <Arrow\r\n              onClick={() => {\r\n                setPage(page === 1 ? page : page - 1)\r\n              }}\r\n            >\r\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\r\n            </Arrow>\r\n\r\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\r\n\r\n            <Arrow\r\n              onClick={() => {\r\n                setPage(page === maxPage ? page : page + 1)\r\n              }}\r\n            >\r\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\r\n            </Arrow>\r\n          </PageButtons>\r\n        </Card>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Collectible\r\n"],"sourceRoot":""}