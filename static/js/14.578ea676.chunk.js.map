{"version":3,"sources":["views/Nft/market/components/BuySellModals/BuyModal/types.ts","views/Nft/market/components/BuySellModals/BuyModal/styles.tsx","views/Nft/market/components/BuySellModals/BuyModal/ReviewStage.tsx","views/Nft/market/components/BuySellModals/BuyModal/index.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/styles.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/MainPancakeBunnyCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/ExpandableCard.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ManagePancakeBunniesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/PropertiesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/DetailsCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/MoreFromThisCollection.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/ForSaleTableRows.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/CountdownCircle.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/UpdateIndicator.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/utils.ts","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/MainNFTCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/ManageNFTsCard.tsx","views/Nft/market/hooks/useNftOwner.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/OwnerCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/index.tsx","../node_modules/lodash/_shuffleSelf.js","views/Nft/market/hooks/useGetCollectionDistribution.tsx","../node_modules/lodash/sum.js","../node_modules/lodash/shuffle.js","../node_modules/lodash/_arrayShuffle.js","../node_modules/lodash/_baseShuffle.js","views/Nft/market/hooks/useAllPancakeBunnyNfts.ts","../node_modules/lodash/_baseSum.js"],"names":["PaymentCurrency","BuyingStage","StyledModal","styled","Modal","stage","theme","APPROVE_AND_CONFIRM","CONFIRM","colors","textSubtle","BorderedBox","Grid","background","cardBorder","radii","default","BnbAmountCell","bnbAmount","isLoading","isInsufficient","bnbBusdPrice","useBNBBusdPrice","flexDirection","justifySelf","width","height","mb","usdAmount","multiplyPriceByAmount","justifyContent","mr","bold","color","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","small","textAlign","ReviewStage","nftToBuy","paymentCurrency","setPaymentCurrency","nftPrice","walletBalance","walletFetchStatus","notEnoughBnbForPurchase","continueToNextStage","t","useTranslation","account","useWeb3React","px","pt","src","image","thumbnail","fontSize","collectionName","name","alignItems","p","as","Link","scale","external","variant","href","getBscScanLinkForNft","collectionAddress","tokenId","activeIndex","onItemClick","index","symbol","BNB","FetchStatus","SUCCESS","ConnectWalletButton","my","BASE_URL","pb","onClick","disabled","style","symbol1","symbol2","modalTitles","REVIEW","TX_CONFIRMED","BuyModal","onDismiss","useState","setStage","confirmedTxHash","setConfirmedTxHash","isPaymentCurrentInitialized","setIsPaymentCurrentInitialized","useTheme","callWithGasPrice","useCallWithGasPrice","wbnbContract","useERC20","tokens","wbnb","address","nftMarketContract","useNftMarketContract","toastSuccess","useToast","dispatch","useAppDispatch","nftPriceWei","parseUnits","marketData","currentAskPrice","parseFloat","useGetBnbBalance","bnbBalance","balance","bnbFetchStatus","fetchStatus","formattedBnbBalance","formatEther","useTokenBalance","wbnbBalance","wbnbFetchStatus","formattedWbnbBalance","getBalanceNumber","lt","ethersToBigNumber","useEffect","gte","WBNB","useApproveConfirmTransaction","onRequiresApproval","a","allowance","currentAllowance","gt","onApprove","ethers","constants","MaxUint256","onApproveSuccess","receipt","Toast","txHash","transactionHash","onConfirm","payAmount","Number","isNaN","BigNumber","from","value","onSuccess","addUserNft","nftLocation","NftLocation","WALLET","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","ApproveAndConfirmStage","ConfirmStage","TransactionConfirmed","TwoColumnsContainer","Flex","RoundedImage","Image","SmallRoundedImage","Container","CollectionLink","primary","mediaQueries","lg","CollectibleRowContainer","StyledSortButton","button","secondary","ButtonContainer","Box","TableHeading","MainPancakeBunnyCard","cheapestNft","cheapestNftFromOtherSellers","nothingForSaleBunny","nftToDisplay","onlyOwnNftsOnSale","hasListings","priceInUsd","useModal","onPresentBuyModal","SellModal","nftToSell","onPresentAdjustPriceModal","actionButton","minWidth","mt","flex","to","nftsBaseUrl","description","expandAnimation","keyframes","collapseAnimation","ExpandableCardBody","expanded","css","FullWidthCard","Card","ExpandableCard","icon","content","setExpanded","gridTemplateColumns","borderBottom","prev","maxWidth","ScrollableContainer","Divider","div","LocationColors","FORSALE","PROFILE","LocationIcons","SellIcon","WalletFilledIcon","CameraIcon","CollectibleRow","nft","lowestPrice","modalVariant","location","ProfileNftModal","onPresentProfileNftModal","onPresentModal","mx","CollectiblesByLocation","nfts","IconComponent","display","map","ManagePancakeBunniesCard","bunnyId","useUserNfts","userNftsInitializationState","userNfts","useFetchUserNfts","bunniesInWallet","filter","attributes","bunniesForSale","profilePicBunny","loading","UserNftInitializationState","INITIALIZED","useHasNoBunnies","length","KNOWN_TRAITS_TEXT","SingleProperty","rarity","textTransform","toFixed","PropertiesCard","properties","property","traitType","LongTextContainer","Text","DetailsCard","contractAddress","ipfsJson","count","chainId","useActiveWeb3React","ipfsLink","uriToHttp","getBscScanLink","formatNumber","SwiperCircle","isActive","textDisabled","StyledSwiper","md","MoreFromThisCollection","currentTokenName","swiperRef","setSwiperRef","setActiveIndex","useMatchBreakpoints","isMobile","isMd","isLg","allPancakeBunnyNfts","useAllPancakeBunnyNfts","collectionNfts","useNftsFromCollection","isPBCollection","isAddress","pancakeBunniesAddress","fetchNftsFromCollections","page","size","nftsToShow","useMemo","shuffle","isTradable","slidesPerView","maxPageIndex","reduce","nftArray","current","find","push","slice","spaceBetween","onSwiper","onActiveIndexChange","newActiveIndex","Math","ceil","slidesPerGroup","initialSlide","slidePrev","Array","keys","slideTo","goToSlide","slideNext","OwnersTableRow","Row","ownNft","currentSeller","toLowerCase","pl","ProfileCell","accountAddress","ForSaleTableRow","nftsForSale","countdownAnimation","CountdownContainer","primaryBright","CountdownCircle","secondsRemaining","isUpdating","lineHeight","r","cx","cy","UpdateIndicator","setSecondsRemaining","isFetchingMorePancakeBunnies","useLoadingState","isUpdatingPancakeBunnies","useTooltip","placement","tooltip","tooltipVisible","targetRef","intervalId","setInterval","clearInterval","ref","StyledCard","hasManyPages","ForSaleTableCard","totalForSale","loadMore","isFetchingMoreNfts","priceSort","togglePriceSort","setPage","itemsPerPage","needsExtraPage","maxPage","floor","nftsOnCurrentPage","switchPage","pageNumber","loadMoreButton","ml","num","py","type","ForSaleTableRows","IndividualPancakeBunnyPage","setNothingForSaleBunny","allBunnies","useGetAllBunniesByBunnyId","setPriceSort","previousPriceSort","usePreviousValue","useFetchByBunnyIdAndUpdate","latestPancakeBunniesUpdateAt","fetchMorePancakeBunnies","fastRefresh","useRefresh","isWindowVisible","useIsWindowVisible","bunniesSortedByPrice","orderBy","allBunniesFromOtherSellers","bunny","cheapestBunny","cheapestBunnyFromOtherSellers","useGetCollectionDistributionPB","distributionData","data","isFetchingDistribution","isFetching","Date","now","PANCAKE_BUNNIES_UPDATE_FREQUENCY","getNftsFromCollectionApi","collection","displayType","fetchBasicBunnyData","sortedNfts","sort","nftA","nftB","nftPriceA","nftPriceB","sortNFTsByPriceBuilder","PageLoader","propertyRarity","total","sum","Object","values","getBunnyIdRarity","Page","metadataUrl","currentValue","MainNFTCard","isOwnNft","nftIsProfilePic","currentAskPriceAsNumber","onPresentSellModal","EditProfileModal","onEditProfileModal","ownerButtons","CollectibleByLocation","ManageNFTsCard","hasThisNft","useNftOwner","owner","setOwner","isLoadingOwner","setIsLoadingOwner","collectionContract","useErc721CollectionContract","getOwner","ownerOf","tokenOwner","OwnerRow","OwnerCard","padding","IndividualNFTPage","setNft","setIsOwnNft","useGetCollectionDistribution","fetchNftData","getNftApi","metadata","getNftsMarketData","nftOwnedByConnectedUser","userNft","userProfilePicture","rarityMap","nftAttributeValue","attribute","IndividualNFTPageRouter","useParams","baseRandom","require","module","exports","array","lastIndex","rand","state","setState","prevState","getCollectionDistributionApi","apiResponse","fetchTokens","baseSum","identity","arrayShuffle","baseShuffle","isArray","copyArray","shuffleSelf","setAllPancakeBunnyNfts","bunnyIds","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","meta","updatedAt","fetchPancakeBunnies","iteratee","result"],"mappings":"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","file":"static/js/14.578ea676.chunk.js","sourcesContent":["import { TokenMarketData, Image } from 'state/nftMarket/types'\r\n\r\nexport enum PaymentCurrency {\r\n  BNB,\r\n  WBNB,\r\n}\r\n\r\nexport enum BuyingStage {\r\n  REVIEW,\r\n  APPROVE_AND_CONFIRM,\r\n  CONFIRM,\r\n  TX_CONFIRMED,\r\n}\r\n\r\nexport interface BuyNFT {\r\n  collection: {\r\n    address: string\r\n    name: string\r\n  }\r\n  token: TokenMarketData\r\n  name: string\r\n  image: Image\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Grid, Flex, Text, BinanceIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { BuyingStage } from './types'\r\n\r\nexport const StyledModal = styled(Modal)<{ stage: BuyingStage }>`\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n  & h2:first-of-type {\r\n    ${({ stage, theme }) =>\r\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\r\n        ? `color: ${theme.colors.textSubtle}`\r\n        : null};\r\n  }\r\n  & svg:first-of-type {\r\n    ${({ stage, theme }) =>\r\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\r\n        ? `fill: ${theme.colors.textSubtle}`\r\n        : null};\r\n  }\r\n`\r\n\r\nexport const BorderedBox = styled(Grid)`\r\n  margin: 16px 0;\r\n  padding: 16px;\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-row-gap: 8px;\r\n`\r\n\r\ninterface BnbAmountCellProps {\r\n  bnbAmount: number\r\n  isLoading?: boolean\r\n  isInsufficient?: boolean\r\n}\r\n\r\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount, isLoading, isInsufficient }) => {\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  if (isLoading) {\r\n    return (\r\n      <Flex flexDirection=\"column\" justifySelf=\"flex-end\">\r\n        <Skeleton width=\"86px\" height=\"20px\" mb=\"6px\" />\r\n        <Skeleton width=\"86px\" height=\"20px\" />\r\n      </Flex>\r\n    )\r\n  }\r\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\r\n  return (\r\n    <Flex justifySelf=\"flex-end\" flexDirection=\"column\">\r\n      <Flex justifyContent=\"flex-end\">\r\n        <BinanceIcon height={16} width={16} mr=\"4px\" />\r\n        <Text bold color={isInsufficient ? 'failure' : 'text'}>{`${bnbAmount.toLocaleString(undefined, {\r\n          minimumFractionDigits: 3,\r\n          maximumFractionDigits: 3,\r\n        })}`}</Text>\r\n      </Flex>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        {`($${usdAmount.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { Flex, Text, Button, ButtonMenu, ButtonMenuItem, Message, Link } from '@pancakeswap/uikit'\r\nimport { FetchStatus } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BASE_URL } from 'config'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { Divider, RoundedImage } from '../shared/styles'\r\nimport { BorderedBox, BnbAmountCell } from './styles'\r\nimport { PaymentCurrency } from './types'\r\n\r\ninterface ReviewStageProps {\r\n  nftToBuy: NftToken\r\n  paymentCurrency: PaymentCurrency\r\n  setPaymentCurrency: (index: number) => void\r\n  nftPrice: number\r\n  walletBalance: number\r\n  walletFetchStatus: FetchStatus\r\n  notEnoughBnbForPurchase: boolean\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst ReviewStage: React.FC<ReviewStageProps> = ({\r\n  nftToBuy,\r\n  paymentCurrency,\r\n  setPaymentCurrency,\r\n  nftPrice,\r\n  walletBalance,\r\n  walletFetchStatus,\r\n  notEnoughBnbForPurchase,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  return (\r\n    <>\r\n      <Flex px=\"24px\" pt=\"24px\" flexDirection=\"column\">\r\n        <Flex>\r\n          <RoundedImage src={nftToBuy.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Flex flexDirection=\"column\" justifyContent=\"space-evenly\">\r\n            <Text color=\"textSubtle\" fontSize=\"12px\">\r\n              {nftToBuy.collectionName}\r\n            </Text>\r\n            <Text bold>{nftToBuy.name}</Text>\r\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n              <Text fontSize=\"12px\" color=\"textSubtle\" p=\"0px\" height=\"16px\" mr=\"4px\">\r\n                {t('Token ID:')}\r\n              </Text>\r\n              <Button\r\n                as={Link}\r\n                scale=\"xs\"\r\n                px=\"0px\"\r\n                pt=\"2px\"\r\n                external\r\n                variant=\"text\"\r\n                href={getBscScanLinkForNft(nftToBuy.collectionAddress, nftToBuy.tokenId)}\r\n              >\r\n                {nftToBuy.tokenId}\r\n              </Button>\r\n            </Flex>\r\n          </Flex>\r\n        </Flex>\r\n        <BorderedBox>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Pay with')}\r\n          </Text>\r\n          <ButtonMenu\r\n            activeIndex={paymentCurrency}\r\n            onItemClick={(index) => setPaymentCurrency(index)}\r\n            scale=\"sm\"\r\n            variant=\"subtle\"\r\n          >\r\n            <ButtonMenuItem>BNB</ButtonMenuItem>\r\n            <ButtonMenuItem>WBNB</ButtonMenuItem>\r\n          </ButtonMenu>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Total payment')}\r\n          </Text>\r\n          <BnbAmountCell bnbAmount={nftPrice} />\r\n          <Text small color=\"textSubtle\">\r\n            {t('%symbol% in wallet', { symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB' })}\r\n          </Text>\r\n          {!account ? (\r\n            <Flex justifySelf=\"flex-end\">\r\n              <ConnectWalletButton scale=\"sm\" />\r\n            </Flex>\r\n          ) : (\r\n            <BnbAmountCell\r\n              bnbAmount={walletBalance}\r\n              isLoading={walletFetchStatus !== FetchStatus.SUCCESS}\r\n              isInsufficient={walletFetchStatus === FetchStatus.SUCCESS && notEnoughBnbForPurchase}\r\n            />\r\n          )}\r\n        </BorderedBox>\r\n        {walletFetchStatus === FetchStatus.SUCCESS && notEnoughBnbForPurchase && (\r\n          <Message p=\"8px\" variant=\"danger\">\r\n            <Text>\r\n              {t('Not enough %symbol% to purchase this NFT', {\r\n                symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB',\r\n              })}\r\n            </Text>\r\n          </Message>\r\n        )}\r\n        <Flex alignItems=\"center\">\r\n          <Text my=\"16px\" mr=\"4px\">\r\n            {t('Convert between BNB and WBNB for free')}:\r\n          </Text>\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${BASE_URL}/swap?inputCurrency=BNB&outputCurrency=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c`}\r\n          >\r\n            {t('Convert')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex px=\"24px\" pb=\"24px\" flexDirection=\"column\">\r\n        <Button\r\n          onClick={continueToNextStage}\r\n          disabled={walletFetchStatus !== FetchStatus.SUCCESS || notEnoughBnbForPurchase}\r\n          mb=\"8px\"\r\n        >\r\n          {t('Checkout')}\r\n        </Button>\r\n        <Button\r\n          as={Link}\r\n          external\r\n          style={{ width: '100%' }}\r\n          href={`${BASE_URL}/swap?outputCurrency=BNB`}\r\n          variant=\"secondary\"\r\n        >\r\n          {t('Get %symbol1% or %symbol2%', { symbol1: 'BNB', symbol2: 'WBNB' })}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ReviewStage\r\n","import React, { useEffect, useState } from 'react'\r\nimport { InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { ethersToBigNumber } from 'utils/bigNumber'\r\nimport tokens from 'config/constants/tokens'\r\nimport { parseUnits, formatEther } from 'ethers/lib/utils'\r\nimport { useERC20, useNftMarketContract } from 'hooks/useContract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useAppDispatch } from 'state'\r\nimport { addUserNft } from 'state/nftMarket/reducer'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport { StyledModal } from './styles'\r\nimport ReviewStage from './ReviewStage'\r\nimport ConfirmStage from '../shared/ConfirmStage'\r\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\r\nimport { PaymentCurrency, BuyingStage } from './types'\r\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\r\n\r\nconst modalTitles = {\r\n  [BuyingStage.REVIEW]: 'Review',\r\n  [BuyingStage.APPROVE_AND_CONFIRM]: 'Back',\r\n  [BuyingStage.CONFIRM]: 'Back',\r\n  [BuyingStage.TX_CONFIRMED]: 'Transaction Confirmed',\r\n}\r\n\r\ninterface BuyModalProps extends InjectedModalProps {\r\n  nftToBuy: NftToken\r\n}\r\n\r\nconst BuyModal: React.FC<BuyModalProps> = ({ nftToBuy, onDismiss }) => {\r\n  const [stage, setStage] = useState(BuyingStage.REVIEW)\r\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\r\n  const [paymentCurrency, setPaymentCurrency] = useState<PaymentCurrency>(PaymentCurrency.BNB)\r\n  const [isPaymentCurrentInitialized, setIsPaymentCurrentInitialized] = useState(false)\r\n  const { theme } = useTheme()\r\n  const { t } = useTranslation()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const { account } = useWeb3React()\r\n  const wbnbContract = useERC20(tokens.wbnb.address)\r\n  const nftMarketContract = useNftMarketContract()\r\n\r\n  const { toastSuccess } = useToast()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const nftPriceWei = parseUnits(nftToBuy.marketData.currentAskPrice, 'ether')\r\n  const nftPrice = parseFloat(nftToBuy.marketData.currentAskPrice)\r\n\r\n  // BNB - returns ethers.BigNumber\r\n  const { balance: bnbBalance, fetchStatus: bnbFetchStatus } = useGetBnbBalance()\r\n  const formattedBnbBalance = parseFloat(formatEther(bnbBalance))\r\n  // WBNB - returns BigNumber\r\n  const { balance: wbnbBalance, fetchStatus: wbnbFetchStatus } = useTokenBalance(tokens.wbnb.address)\r\n  const formattedWbnbBalance = getBalanceNumber(wbnbBalance)\r\n\r\n  const walletBalance = paymentCurrency === PaymentCurrency.BNB ? formattedBnbBalance : formattedWbnbBalance\r\n  const walletFetchStatus = paymentCurrency === PaymentCurrency.BNB ? bnbFetchStatus : wbnbFetchStatus\r\n\r\n  const notEnoughBnbForPurchase =\r\n    paymentCurrency === PaymentCurrency.BNB\r\n      ? bnbBalance.lt(nftPriceWei)\r\n      : wbnbBalance.lt(ethersToBigNumber(nftPriceWei))\r\n\r\n  useEffect(() => {\r\n    if (bnbBalance.lt(nftPriceWei) && wbnbBalance.gte(ethersToBigNumber(nftPriceWei)) && !isPaymentCurrentInitialized) {\r\n      setPaymentCurrency(PaymentCurrency.WBNB)\r\n      setIsPaymentCurrentInitialized(true)\r\n    }\r\n  }, [bnbBalance, wbnbBalance, nftPriceWei, isPaymentCurrentInitialized])\r\n\r\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\r\n    onRequiresApproval: async () => {\r\n      try {\r\n        const currentAllowance = await wbnbContract.allowance(account, nftMarketContract.address)\r\n        return currentAllowance.gt(0)\r\n      } catch (error) {\r\n        return false\r\n      }\r\n    },\r\n    onApprove: () => {\r\n      return callWithGasPrice(wbnbContract, 'approve', [nftMarketContract.address, ethers.constants.MaxUint256])\r\n    },\r\n    onApproveSuccess: async ({ receipt }) => {\r\n      toastSuccess(\r\n        t('Contract approved - you can now buy NFT with WBNB!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n      )\r\n    },\r\n    onConfirm: () => {\r\n      const payAmount = Number.isNaN(nftPrice)\r\n        ? ethers.BigNumber.from(0)\r\n        : parseUnits(nftToBuy.marketData.currentAskPrice)\r\n      if (paymentCurrency === PaymentCurrency.BNB) {\r\n        return callWithGasPrice(nftMarketContract, 'buyTokenUsingBNB', [nftToBuy.collectionAddress, nftToBuy.tokenId], {\r\n          value: payAmount,\r\n        })\r\n      }\r\n      return callWithGasPrice(nftMarketContract, 'buyTokenUsingWBNB', [\r\n        nftToBuy.collectionAddress,\r\n        nftToBuy.tokenId,\r\n        payAmount,\r\n      ])\r\n    },\r\n    onSuccess: async ({ receipt }) => {\r\n      setConfirmedTxHash(receipt.transactionHash)\r\n      setStage(BuyingStage.TX_CONFIRMED)\r\n      dispatch(\r\n        addUserNft({\r\n          tokenId: nftToBuy.tokenId,\r\n          collectionAddress: nftToBuy.collectionAddress,\r\n          nftLocation: NftLocation.WALLET,\r\n        }),\r\n      )\r\n      toastSuccess(\r\n        t('Your NFT has been sent to your wallet'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n      )\r\n    },\r\n  })\r\n\r\n  const continueToNextStage = () => {\r\n    if (paymentCurrency === PaymentCurrency.WBNB && !isApproved) {\r\n      setStage(BuyingStage.APPROVE_AND_CONFIRM)\r\n    } else {\r\n      setStage(BuyingStage.CONFIRM)\r\n    }\r\n  }\r\n\r\n  const goBack = () => {\r\n    setStage(BuyingStage.REVIEW)\r\n  }\r\n\r\n  const showBackButton = stage === BuyingStage.CONFIRM || stage === BuyingStage.APPROVE_AND_CONFIRM\r\n\r\n  return (\r\n    <StyledModal\r\n      title={t(modalTitles[stage])}\r\n      stage={stage}\r\n      onDismiss={onDismiss}\r\n      onBack={showBackButton ? goBack : null}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stage === BuyingStage.REVIEW && (\r\n        <ReviewStage\r\n          nftToBuy={nftToBuy}\r\n          paymentCurrency={paymentCurrency}\r\n          setPaymentCurrency={setPaymentCurrency}\r\n          nftPrice={nftPrice}\r\n          walletBalance={walletBalance}\r\n          walletFetchStatus={walletFetchStatus}\r\n          notEnoughBnbForPurchase={notEnoughBnbForPurchase}\r\n          continueToNextStage={continueToNextStage}\r\n        />\r\n      )}\r\n      {stage === BuyingStage.APPROVE_AND_CONFIRM && (\r\n        <ApproveAndConfirmStage\r\n          variant=\"buy\"\r\n          handleApprove={handleApprove}\r\n          isApproved={isApproved}\r\n          isApproving={isApproving}\r\n          isConfirming={isConfirming}\r\n          handleConfirm={handleConfirm}\r\n        />\r\n      )}\r\n      {stage === BuyingStage.CONFIRM && <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />}\r\n      {stage === BuyingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default BuyModal\r\n","import styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport { Box, Flex, Grid, Image } from '@pancakeswap/uikit'\r\n\r\nexport const TwoColumnsContainer = styled(Flex)`\r\n  gap: 22px;\r\n  align-items: flex-start;\r\n  & > div:first-child {\r\n    flex: 1;\r\n    gap: 20px;\r\n  }\r\n  & > div:last-child {\r\n    flex: 2;\r\n  }\r\n`\r\n\r\nexport const RoundedImage = styled(Image)`\r\n  height: max-content;\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n  overflow: hidden;\r\n  & > img {\r\n    object-fit: contain;\r\n  }\r\n`\r\n\r\nexport const SmallRoundedImage = styled(Image)`\r\n  & > img {\r\n    border-radius: ${({ theme }) => theme.radii.default};\r\n  }\r\n`\r\n\r\nexport const Container = styled(Flex)`\r\n  gap: 24px;\r\n`\r\n\r\nexport const CollectionLink = styled(Link)`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: block;\r\n  font-weight: 600;\r\n  margin-top: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: 50px;\r\n  }\r\n`\r\n\r\nexport const CollectibleRowContainer = styled(Grid)`\r\n  &:hover {\r\n    opacity: 0.5;\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nexport const StyledSortButton = styled.button`\r\n  border: none;\r\n  cursor: pointer;\r\n  background: none;\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n  font-weight: bold;\r\n`\r\n\r\nexport const ButtonContainer = styled(Box)`\r\n  text-align: right;\r\n  padding-right: 24px;\r\n`\r\n\r\nexport const TableHeading = styled(Grid)`\r\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\r\n`\r\n","import React from 'react'\r\nimport { Flex, Box, Card, CardBody, Text, Button, BinanceIcon, Skeleton, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport { nftsBaseUrl } from '../../../constants'\r\nimport { RoundedImage, Container, CollectionLink } from '../shared/styles'\r\n\r\ninterface MainPancakeBunnyCardProps {\r\n  cheapestNft: NftToken\r\n  cheapestNftFromOtherSellers?: NftToken\r\n  nothingForSaleBunny?: NftToken\r\n}\r\n\r\nconst MainPancakeBunnyCard: React.FC<MainPancakeBunnyCardProps> = ({\r\n  cheapestNft,\r\n  cheapestNftFromOtherSellers,\r\n  nothingForSaleBunny,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n\r\n  const nftToDisplay = cheapestNftFromOtherSellers || cheapestNft || nothingForSaleBunny\r\n\r\n  const onlyOwnNftsOnSale = !cheapestNftFromOtherSellers\r\n  const hasListings = cheapestNftFromOtherSellers || cheapestNft\r\n\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nftToDisplay.marketData?.currentAskPrice))\r\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nftToDisplay} />)\r\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={cheapestNft} />)\r\n\r\n  const actionButton = onlyOwnNftsOnSale ? (\r\n    <Button\r\n      variant=\"danger\"\r\n      minWidth=\"168px\"\r\n      width={['100%', null, 'max-content']}\r\n      mt=\"24px\"\r\n      onClick={onPresentAdjustPriceModal}\r\n    >\r\n      {t('Adjust Sale Price')}\r\n    </Button>\r\n  ) : (\r\n    <Button\r\n      disabled={onlyOwnNftsOnSale}\r\n      minWidth=\"168px\"\r\n      width={['100%', null, 'max-content']}\r\n      mt=\"24px\"\r\n      onClick={onPresentBuyModal}\r\n    >\r\n      {t('Buy')}\r\n    </Button>\r\n  )\r\n  return (\r\n    <Card mb=\"40px\">\r\n      <CardBody>\r\n        <Container flexDirection={['column-reverse', null, 'row']}>\r\n          <Flex flex=\"2\">\r\n            <Box>\r\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nftToDisplay.collectionAddress}`}>\r\n                {nftToDisplay.collectionName}\r\n              </CollectionLink>\r\n              <Text fontSize=\"40px\" bold mt=\"12px\">\r\n                {nftToDisplay.name}\r\n              </Text>\r\n              <Text mt={['16px', '16px', '48px']}>{t(nftToDisplay.description)}</Text>\r\n              {(cheapestNft || cheapestNftFromOtherSellers) && (\r\n                <>\r\n                  <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\r\n                    {t('Lowest price')}\r\n                  </Text>\r\n                  <Flex alignItems=\"center\" mt=\"8px\">\r\n                    <BinanceIcon width={18} height={18} mr=\"4px\" />\r\n                    <Text fontSize=\"24px\" bold mr=\"4px\">\r\n                      {nftToDisplay.marketData.currentAskPrice}\r\n                    </Text>\r\n                    {bnbBusdPrice ? (\r\n                      <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\r\n                        minimumFractionDigits: 2,\r\n                        maximumFractionDigits: 2,\r\n                      })} USD)`}</Text>\r\n                    ) : (\r\n                      <Skeleton width=\"64px\" />\r\n                    )}\r\n                  </Flex>\r\n                </>\r\n              )}\r\n              {hasListings && actionButton}\r\n            </Box>\r\n          </Flex>\r\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\">\r\n            <RoundedImage src={nftToDisplay.image.thumbnail} width={440} height={440} />\r\n          </Flex>\r\n        </Container>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default MainPancakeBunnyCard\r\n","import React, { useState } from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { Grid, Text, Card, Box, ChevronUpIcon, ChevronDownIcon, IconButton } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 720px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 710px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst ExpandableCardBody = styled(Box)<{ expanded: boolean }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n`\r\n\r\nconst FullWidthCard = styled(Card)`\r\n  width: 100%;\r\n`\r\n\r\ninterface ExpandableCardProps {\r\n  icon: React.ReactNode\r\n  title: string\r\n  content: React.ReactNode\r\n}\r\n\r\nconst ExpandableCard: React.FC<ExpandableCardProps> = ({ icon, title, content }) => {\r\n  const [expanded, setExpanded] = useState(true)\r\n  const { theme } = useTheme()\r\n  return (\r\n    <FullWidthCard>\r\n      <Grid\r\n        gridTemplateColumns=\"1fr 8fr 1fr\"\r\n        alignItems=\"center\"\r\n        height=\"72px\"\r\n        px=\"24px\"\r\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\r\n      >\r\n        {icon}\r\n        <Text bold>{title}</Text>\r\n        <IconButton\r\n          onClick={() => {\r\n            setExpanded((prev) => !prev)\r\n          }}\r\n          variant=\"text\"\r\n          maxWidth=\"32px\"\r\n        >\r\n          {expanded ? (\r\n            <ChevronUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\r\n          ) : (\r\n            <ChevronDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\r\n          )}\r\n        </IconButton>\r\n      </Grid>\r\n      <ExpandableCardBody expanded={expanded}>{content}</ExpandableCardBody>\r\n    </FullWidthCard>\r\n  )\r\n}\r\n\r\nexport default ExpandableCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Grid,\r\n  Text,\r\n  CogIcon,\r\n  SellIcon,\r\n  WalletFilledIcon,\r\n  CameraIcon,\r\n  BinanceIcon,\r\n  Skeleton,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableCard from '../shared/ExpandableCard'\r\nimport useFetchUserNfts from '../../../Profile/hooks/useFetchUserNfts'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport ProfileNftModal from '../../../components/ProfileNftModal'\r\nimport { SmallRoundedImage, CollectibleRowContainer } from '../shared/styles'\r\n\r\nconst ScrollableContainer = styled(Box)`\r\n  overflow-y: auto;\r\n  max-height: 224px;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  margin: 16px 20px;\r\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\r\n`\r\n\r\nconst LocationColors = {\r\n  [NftLocation.FORSALE]: 'failure',\r\n  [NftLocation.WALLET]: 'secondary',\r\n  [NftLocation.PROFILE]: 'textSubtle',\r\n}\r\n\r\nconst LocationIcons = {\r\n  [NftLocation.FORSALE]: SellIcon,\r\n  [NftLocation.WALLET]: WalletFilledIcon,\r\n  [NftLocation.PROFILE]: CameraIcon,\r\n}\r\n\r\ninterface CollectibleRowProps {\r\n  nft: NftToken\r\n  lowestPrice: string\r\n}\r\n\r\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft, lowestPrice }) => {\r\n  const { t } = useTranslation()\r\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\r\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\r\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\r\n  return (\r\n    <CollectibleRowContainer\r\n      gridTemplateColumns=\"96px 1fr\"\r\n      px=\"16px\"\r\n      pb=\"8px\"\r\n      my=\"16px\"\r\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\r\n    >\r\n      <SmallRoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\r\n      <Grid gridTemplateColumns=\"1fr 1fr\">\r\n        <Text bold>{nft.name}</Text>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n          {nft.collectionName}\r\n        </Text>\r\n        {lowestPrice && (\r\n          <>\r\n            <Text small color=\"textSubtle\">\r\n              {t('Lowest price')}\r\n            </Text>\r\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\r\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\r\n              <Text small>{lowestPrice}</Text>\r\n            </Flex>\r\n          </>\r\n        )}\r\n        {nft.location === NftLocation.FORSALE ? (\r\n          <>\r\n            <Text small color=\"textSubtle\">\r\n              {t('Your price')}\r\n            </Text>\r\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\r\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\r\n              <Text small>{nft.marketData.currentAskPrice}</Text>\r\n            </Flex>\r\n          </>\r\n        ) : (\r\n          <Text small color=\"textDisabled\">\r\n            {t('Not on sale')}\r\n          </Text>\r\n        )}\r\n      </Grid>\r\n    </CollectibleRowContainer>\r\n  )\r\n}\r\n\r\ninterface CollectiblesByLocationProps {\r\n  location: NftLocation\r\n  nfts: NftToken[]\r\n  lowestPrice: string\r\n}\r\n\r\nconst CollectiblesByLocation: React.FC<CollectiblesByLocationProps> = ({ location, nfts, lowestPrice }) => {\r\n  const { t } = useTranslation()\r\n  const IconComponent = LocationIcons[location]\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\r\n        <IconComponent color={LocationColors[location]} width=\"24px\" height=\"24px\" />\r\n        <Text display=\"inline\" bold color={LocationColors[location]}>\r\n          {t(location)}\r\n        </Text>\r\n      </Grid>\r\n      <ScrollableContainer>\r\n        {nfts.map((nft) => (\r\n          <CollectibleRow key={nft.tokenId} nft={nft} lowestPrice={lowestPrice} />\r\n        ))}\r\n      </ScrollableContainer>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface ManagePancakeBunniesCardProps {\r\n  bunnyId: string\r\n  lowestPrice?: string\r\n}\r\n\r\nconst ManagePancakeBunniesCard: React.FC<ManagePancakeBunniesCardProps> = ({ bunnyId, lowestPrice }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\r\n  useFetchUserNfts()\r\n\r\n  const bunniesInWallet = userNfts.filter(\r\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.WALLET,\r\n  )\r\n  const bunniesForSale = userNfts.filter(\r\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.FORSALE,\r\n  )\r\n  const profilePicBunny = userNfts.filter(\r\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.PROFILE,\r\n  )\r\n\r\n  const loading = userNftsInitializationState !== UserNftInitializationState.INITIALIZED\r\n  const useHasNoBunnies =\r\n    !loading && bunniesInWallet.length === 0 && bunniesForSale.length === 0 && profilePicBunny.length === 0\r\n\r\n  const content = (\r\n    <Box pt=\"16px\">\r\n      {!account && (\r\n        <Flex mb=\"16px\" justifyContent=\"center\">\r\n          <ConnectWalletButton />\r\n        </Flex>\r\n      )}\r\n      {useHasNoBunnies && (\r\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\r\n          {t('You don’t have any of this item.')}\r\n        </Text>\r\n      )}\r\n      {account && loading && (\r\n        <Box px=\"16px\" pb=\"8px\">\r\n          <Skeleton mb=\"8px\" />\r\n          <Skeleton mb=\"8px\" />\r\n          <Skeleton mb=\"8px\" />\r\n        </Box>\r\n      )}\r\n      {bunniesForSale.length > 0 && (\r\n        <CollectiblesByLocation location={NftLocation.FORSALE} nfts={bunniesForSale} lowestPrice={lowestPrice} />\r\n      )}\r\n      {bunniesInWallet.length > 0 && (\r\n        <>\r\n          {bunniesForSale.length > 0 && <Divider />}\r\n          <CollectiblesByLocation location={NftLocation.WALLET} nfts={bunniesInWallet} lowestPrice={lowestPrice} />\r\n        </>\r\n      )}\r\n      {profilePicBunny.length > 0 && (\r\n        <>\r\n          {(bunniesForSale.length > 0 || bunniesInWallet.length > 0) && <Divider />}\r\n          <CollectiblesByLocation location={NftLocation.PROFILE} nfts={profilePicBunny} lowestPrice={lowestPrice} />\r\n        </>\r\n      )}\r\n    </Box>\r\n  )\r\n  return <ExpandableCard title={t('Manage Yours')} icon={<CogIcon width=\"24px\" height=\"24px\" />} content={content} />\r\n}\r\n\r\nexport default ManagePancakeBunniesCard\r\n","import React from 'react'\r\nimport { Box, Flex, Text, NftIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftAttribute } from 'state/nftMarket/types'\r\nimport ExpandableCard from './ExpandableCard'\r\n\r\ninterface PropertiesCardProps {\r\n  properties: NftAttribute[]\r\n  rarity: { [key: string]: number }\r\n}\r\n\r\n// Map of known traits to human-readable text\r\nconst KNOWN_TRAITS_TEXT = {\r\n  bunnyId: 'Bunny ID',\r\n}\r\n\r\nconst SingleProperty: React.FC<{ title: string; value: string | number; rarity: number }> = ({\r\n  title,\r\n  value,\r\n  rarity,\r\n}) => {\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n        {KNOWN_TRAITS_TEXT[title] ?? title}\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Text bold textTransform=\"uppercase\" mr=\"4px\">\r\n          {value}\r\n        </Text>\r\n        {rarity && (\r\n          <Text small color=\"textSubtle\">\r\n            ({rarity.toFixed(2)}%)\r\n          </Text>\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst PropertiesCard: React.FC<PropertiesCardProps> = ({ properties, rarity }) => {\r\n  const { t } = useTranslation()\r\n  const content = (\r\n    <Box p=\"24px\">\r\n      {properties.map((property) => (\r\n        <SingleProperty\r\n          key={property.traitType}\r\n          title={property.traitType}\r\n          value={property.value}\r\n          rarity={rarity[property.traitType]}\r\n        />\r\n      ))}\r\n    </Box>\r\n  )\r\n  return <ExpandableCard title={t('Properties')} icon={<NftIcon width=\"24px\" height=\"24px\" />} content={content} />\r\n}\r\n\r\nexport default PropertiesCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, Text, SearchIcon, Link } from '@pancakeswap/uikit'\r\nimport { getBscScanLink } from 'utils'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport uriToHttp from 'utils/uriToHttp'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport ExpandableCard from './ExpandableCard'\r\n\r\ninterface DetailsCardProps {\r\n  contractAddress: string\r\n  ipfsJson: string\r\n  count?: number\r\n  rarity?: number\r\n}\r\n\r\nconst LongTextContainer = styled(Text)`\r\n  max-width: 120px;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nconst DetailsCard: React.FC<DetailsCardProps> = ({ contractAddress, ipfsJson, count, rarity }) => {\r\n  const { t } = useTranslation()\r\n  const { chainId } = useActiveWeb3React()\r\n  const ipfsLink = ipfsJson ? uriToHttp(ipfsJson)[0] : null\r\n  const content = (\r\n    <Box p=\"24px\">\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n          {t('Contract address')}\r\n        </Text>\r\n        <Link external href={getBscScanLink(contractAddress, 'address', chainId)}>\r\n          <LongTextContainer bold>{contractAddress}</LongTextContainer>\r\n        </Link>\r\n      </Flex>\r\n      {ipfsLink && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n            IPFS JSON\r\n          </Text>\r\n          <Link external href={ipfsLink}>\r\n            <LongTextContainer bold>{ipfsLink}</LongTextContainer>\r\n          </Link>\r\n        </Flex>\r\n      )}\r\n      {count && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\" mr=\"4px\">\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n            {t('Supply Count')}\r\n          </Text>\r\n          <LongTextContainer bold>{formatNumber(count, 0, 0)}</LongTextContainer>\r\n        </Flex>\r\n      )}\r\n      {rarity && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mr=\"4px\">\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n            {t('Rarity')}\r\n          </Text>\r\n          <LongTextContainer bold>{`${formatNumber(rarity, 0, 2)}%`}</LongTextContainer>\r\n        </Flex>\r\n      )}\r\n    </Box>\r\n  )\r\n  return <ExpandableCard title={t('Details')} icon={<SearchIcon width=\"24px\" height=\"24px\" />} content={content} />\r\n}\r\n\r\nexport default DetailsCard\r\n","import React, { useState, useEffect, useMemo } from 'react'\r\nimport shuffle from 'lodash/shuffle'\r\nimport styled from 'styled-components'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport SwiperCore from 'swiper'\r\nimport { ArrowBackIcon, ArrowForwardIcon, Box, IconButton, Text, Flex, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { isAddress } from 'utils'\r\nimport { useNftsFromCollection } from 'state/nftMarket/hooks'\r\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\r\nimport { useAppDispatch } from 'state'\r\nimport { pancakeBunniesAddress } from '../../../constants'\r\nimport { CollectibleLinkCard } from '../../../components/CollectibleCard'\r\nimport useAllPancakeBunnyNfts from '../../../hooks/useAllPancakeBunnyNfts'\r\n\r\nimport 'swiper/swiper-bundle.css'\r\n\r\nconst INITIAL_SLIDE = 4\r\n\r\nconst SwiperCircle = styled.div<{ isActive }>`\r\n  background-color: ${({ theme, isActive }) => (isActive ? theme.colors.secondary : theme.colors.textDisabled)};\r\n  width: 12px;\r\n  height: 12px;\r\n  margin-right: 8px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n`\r\n\r\nconst StyledSwiper = styled.div`\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    .swiper-wrapper {\r\n      max-height: 390px;\r\n    }\r\n  }\r\n`\r\n\r\ninterface MoreFromThisCollectionProps {\r\n  collectionAddress: string\r\n  currentTokenName?: string\r\n  title?: string\r\n}\r\n\r\nconst MoreFromThisCollection: React.FC<MoreFromThisCollectionProps> = ({\r\n  collectionAddress,\r\n  currentTokenName = '',\r\n  title = 'More from this collection',\r\n}) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const [swiperRef, setSwiperRef] = useState<SwiperCore>(null)\r\n  const [activeIndex, setActiveIndex] = useState(1)\r\n  const { isMobile, isMd, isLg } = useMatchBreakpoints()\r\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(collectionAddress)\r\n  const collectionNfts = useNftsFromCollection(collectionAddress)\r\n\r\n  const isPBCollection = isAddress(collectionAddress) === pancakeBunniesAddress\r\n\r\n  useEffect(() => {\r\n    if (!isPBCollection && !collectionNfts) {\r\n      dispatch(\r\n        fetchNftsFromCollections({\r\n          collectionAddress: isAddress(collectionAddress) || collectionAddress,\r\n          page: 1,\r\n          size: 100,\r\n        }),\r\n      )\r\n    }\r\n  }, [collectionNfts, collectionAddress, dispatch, isPBCollection])\r\n\r\n  let nftsToShow = useMemo(() => {\r\n    return shuffle(\r\n      allPancakeBunnyNfts\r\n        ? allPancakeBunnyNfts.filter((nft) => nft.name !== currentTokenName)\r\n        : collectionNfts?.filter((nft) => nft.name !== currentTokenName && nft.marketData?.isTradable),\r\n    )\r\n  }, [allPancakeBunnyNfts, collectionNfts, currentTokenName])\r\n\r\n  if (!nftsToShow || nftsToShow.length === 0) {\r\n    return null\r\n  }\r\n\r\n  let slidesPerView = 4\r\n  let maxPageIndex = 3\r\n\r\n  if (isMd) {\r\n    slidesPerView = 2\r\n    maxPageIndex = 6\r\n  }\r\n\r\n  if (isLg) {\r\n    slidesPerView = 3\r\n    maxPageIndex = 4\r\n  }\r\n\r\n  if (isPBCollection) {\r\n    // PancakeBunnies should display 1 card per bunny id\r\n    nftsToShow = nftsToShow.reduce((nftArray, current) => {\r\n      const bunnyId = current.attributes[0].value\r\n      if (!nftArray.find((nft) => nft.attributes[0].value === bunnyId)) {\r\n        nftArray.push(current)\r\n      }\r\n      return nftArray\r\n    }, [])\r\n  }\r\n  nftsToShow = nftsToShow.slice(0, 12)\r\n\r\n  const nextSlide = () => {\r\n    if (activeIndex < maxPageIndex - 1) {\r\n      setActiveIndex((index) => index + 1)\r\n      swiperRef.slideNext()\r\n    }\r\n  }\r\n\r\n  const previousSlide = () => {\r\n    if (activeIndex > 0) {\r\n      setActiveIndex((index) => index - 1)\r\n      swiperRef.slidePrev()\r\n    }\r\n  }\r\n\r\n  const goToSlide = (index: number) => {\r\n    setActiveIndex(index / slidesPerView)\r\n    swiperRef.slideTo(index)\r\n  }\r\n\r\n  const updateActiveIndex = ({ activeIndex: newActiveIndex }) => {\r\n    if (newActiveIndex !== undefined) setActiveIndex(Math.ceil(newActiveIndex / slidesPerView))\r\n  }\r\n\r\n  return (\r\n    <Box pt=\"56px\" mb=\"52px\">\r\n      {title && (\r\n        <Text bold mb=\"24px\">\r\n          {t(title)}\r\n        </Text>\r\n      )}\r\n      {isMobile ? (\r\n        <StyledSwiper>\r\n          <Swiper spaceBetween={16} slidesPerView={1.5}>\r\n            {nftsToShow.map((nft) => (\r\n              <SwiperSlide key={nft.tokenId}>\r\n                <CollectibleLinkCard nft={nft} />\r\n              </SwiperSlide>\r\n            ))}\r\n          </Swiper>\r\n        </StyledSwiper>\r\n      ) : (\r\n        <StyledSwiper>\r\n          <Swiper\r\n            onSwiper={setSwiperRef}\r\n            onActiveIndexChange={updateActiveIndex}\r\n            spaceBetween={16}\r\n            slidesPerView={slidesPerView}\r\n            slidesPerGroup={slidesPerView}\r\n            initialSlide={INITIAL_SLIDE}\r\n          >\r\n            {nftsToShow.map((nft) => (\r\n              <SwiperSlide key={nft.tokenId}>\r\n                <CollectibleLinkCard\r\n                  nft={nft}\r\n                  currentAskPrice={isPBCollection ? null : parseFloat(nft.marketData?.currentAskPrice)}\r\n                />\r\n              </SwiperSlide>\r\n            ))}\r\n          </Swiper>\r\n          <Flex mt=\"16px\" alignItems=\"center\" justifyContent=\"center\">\r\n            <IconButton variant=\"text\" onClick={previousSlide}>\r\n              <ArrowBackIcon />\r\n            </IconButton>\r\n            {[...Array(maxPageIndex).keys()].map((index) => (\r\n              <SwiperCircle\r\n                key={index}\r\n                onClick={() => goToSlide(index * slidesPerView)}\r\n                isActive={activeIndex === index}\r\n              />\r\n            ))}\r\n            <IconButton variant=\"text\" onClick={nextSlide}>\r\n              <ArrowForwardIcon />\r\n            </IconButton>\r\n          </Flex>\r\n        </StyledSwiper>\r\n      )}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MoreFromThisCollection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport { Button, Grid, Text, Flex, Box, BinanceIcon, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport BuyModal from 'views/Nft/market/components/BuySellModals/BuyModal'\r\nimport SellModal from 'views/Nft/market/components/BuySellModals/SellModal'\r\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\r\nimport { ButtonContainer } from '../../shared/styles'\r\n\r\nconst OwnersTableRow = styled(Grid)`\r\n  grid-template-columns: 2fr 2fr 1fr;\r\n  grid-row-gap: 16px;\r\n  margin-top: 16px;\r\n  & > div {\r\n    padding-bottom: 16px;\r\n    border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\r\n  }\r\n`\r\n\r\ninterface RowProps {\r\n  t: ContextApi['t']\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  account: string\r\n}\r\n\r\nconst Row: React.FC<RowProps> = ({ t, nft, bnbBusdPrice, account }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData.currentAskPrice))\r\n\r\n  const ownNft = account ? nft.marketData.currentSeller === account.toLowerCase() : false\r\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\r\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={nft} />)\r\n\r\n  return (\r\n    <>\r\n      <Box pl=\"24px\">\r\n        <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\r\n          <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\r\n          <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 3)}</Text>\r\n        </Flex>\r\n        {bnbBusdPrice ? (\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\r\n          </Text>\r\n        ) : (\r\n          <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\r\n        )}\r\n      </Box>\r\n      <Box>\r\n        <Flex width=\"max-content\" alignItems=\"center\">\r\n          <ProfileCell accountAddress={nft.marketData.currentSeller} />\r\n        </Flex>\r\n      </Box>\r\n      <ButtonContainer>\r\n        {ownNft ? (\r\n          <Button scale=\"sm\" variant=\"danger\" maxWidth=\"128px\" onClick={onPresentAdjustPriceModal}>\r\n            {t('Edit')}\r\n          </Button>\r\n        ) : (\r\n          <Button scale=\"sm\" variant=\"secondary\" maxWidth=\"128px\" onClick={onPresentBuyModal}>\r\n            {t('Buy')}\r\n          </Button>\r\n        )}\r\n      </ButtonContainer>\r\n    </>\r\n  )\r\n}\r\n\r\ninterface ForSaleTableRowsProps {\r\n  nftsForSale: NftToken[]\r\n}\r\n\r\nconst ForSaleTableRow: React.FC<ForSaleTableRowsProps> = ({ nftsForSale }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  return (\r\n    <OwnersTableRow>\r\n      {nftsForSale.map((nft) => (\r\n        <Row key={nft.tokenId} t={t} nft={nft} bnbBusdPrice={bnbBusdPrice} account={account} />\r\n      ))}\r\n    </OwnersTableRow>\r\n  )\r\n}\r\n\r\nexport default ForSaleTableRow\r\n","import { Spinner, Text } from '@pancakeswap/uikit'\r\nimport React from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\nconst countdownAnimation = keyframes`\r\n  from {\r\n    stroke-dashoffset: 0px;\r\n  }\r\n  to {\r\n    stroke-dashoffset: 113px;\r\n  }\r\n`\r\n\r\nconst CountdownContainer = styled.div`\r\n  position: relative;\r\n  margin: auto;\r\n  height: 40px;\r\n  width: 40px;\r\n  text-align: center;\r\n\r\n  & svg {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    width: 40px;\r\n    height: 40px;\r\n    transform: rotateY(-180deg) rotateZ(-90deg);\r\n\r\n    & circle {\r\n      stroke-dasharray: 113px;\r\n      stroke-dashoffset: 0px;\r\n      stroke-linecap: round;\r\n      stroke-width: 2px;\r\n      stroke: ${({ theme }) => theme.colors.primaryBright};\r\n      fill: none;\r\n      animation: ${countdownAnimation} 10s linear infinite forwards;\r\n    }\r\n  }\r\n`\r\n\r\ninterface CountdownCircleProps {\r\n  secondsRemaining: number\r\n  isUpdating: boolean\r\n}\r\n\r\nconst CountdownCircle: React.FC<CountdownCircleProps> = ({ secondsRemaining, isUpdating }) => {\r\n  if (secondsRemaining < 1 || isUpdating) {\r\n    return <Spinner size={42} />\r\n  }\r\n  return (\r\n    <CountdownContainer>\r\n      <Text color=\"textSubtle\" lineHeight=\"40px\" display=\"inline-block\">\r\n        {secondsRemaining}\r\n      </Text>\r\n      <svg>\r\n        <circle r=\"18\" cx=\"20\" cy=\"20\" />\r\n      </svg>\r\n    </CountdownContainer>\r\n  )\r\n}\r\n\r\nexport default CountdownCircle\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, useTooltip } from '@pancakeswap/uikit'\r\nimport { useLoadingState } from 'state/nftMarket/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CountdownCircle from './CountdownCircle'\r\n\r\nconst UpdateIndicator = () => {\r\n  const { t } = useTranslation()\r\n  const [secondsRemaining, setSecondsRemaining] = useState(10)\r\n  const { isUpdatingPancakeBunnies: isFetchingMorePancakeBunnies } = useLoadingState()\r\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(t('Items in the table update every 10 seconds'), {\r\n    placement: 'auto',\r\n  })\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setSecondsRemaining((prev) => prev - 1)\r\n    }, 1000)\r\n\r\n    return () => {\r\n      clearInterval(intervalId)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!isFetchingMorePancakeBunnies) {\r\n      setSecondsRemaining(10)\r\n    }\r\n  }, [isFetchingMorePancakeBunnies])\r\n\r\n  return (\r\n    <Flex justifyContent=\"center\" ref={targetRef}>\r\n      <CountdownCircle secondsRemaining={secondsRemaining} isUpdating={isFetchingMorePancakeBunnies} />\r\n      {tooltipVisible && tooltip}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default UpdateIndicator\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Flex,\r\n  Card,\r\n  Grid,\r\n  SellIcon,\r\n  Text,\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  useMatchBreakpoints,\r\n  ArrowUpIcon,\r\n  ArrowDownIcon,\r\n  Button,\r\n  Spinner,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport ForSaleTableRows from './ForSaleTableRows'\r\nimport { StyledSortButton, TableHeading } from '../../shared/styles'\r\nimport UpdateIndicator from './UpdateIndicator'\r\nimport { Arrow, PageButtons } from '../../../../components/PaginationButtons'\r\n\r\nconst ITEMS_PER_PAGE_DESKTOP = 10\r\nconst ITEMS_PER_PAGE_MOBILE = 5\r\n\r\nconst StyledCard = styled(Card)<{ hasManyPages: boolean }>`\r\n  width: 100%;\r\n  & > div:first-child {\r\n    ${({ hasManyPages }) => (hasManyPages ? 'min-height: 480px;' : null)}\r\n    display: flex;\r\n    flex-direction: column;\r\n    ${({ theme }) => theme.mediaQueries.md} {\r\n      ${({ hasManyPages }) => (hasManyPages ? 'min-height: 850px;' : null)}\r\n    }\r\n  }\r\n`\r\n\r\ninterface ForSaleTableCardProps {\r\n  nftsForSale: NftToken[]\r\n  bunnyId: string\r\n  totalForSale: number\r\n  priceSort: 'asc' | 'desc'\r\n  isFetchingMoreNfts: boolean\r\n  togglePriceSort: () => void\r\n  loadMore: (orderDirection: 'asc' | 'desc') => void\r\n}\r\n\r\nconst ForSaleTableCard: React.FC<ForSaleTableCardProps> = ({\r\n  nftsForSale,\r\n  bunnyId,\r\n  totalForSale,\r\n  loadMore,\r\n  isFetchingMoreNfts,\r\n  priceSort,\r\n  togglePriceSort,\r\n}) => {\r\n  const [page, setPage] = useState(1)\r\n  const { isMobile } = useMatchBreakpoints()\r\n  const itemsPerPage = isMobile ? ITEMS_PER_PAGE_MOBILE : ITEMS_PER_PAGE_DESKTOP\r\n\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  useEffect(() => {\r\n    // If user clicks on other NFT at the bottom of the page - load new NFT table starting on page 1\r\n    // Same for reversing sorting direction\r\n    setPage(1)\r\n  }, [bunnyId, priceSort])\r\n\r\n  const needsExtraPage = nftsForSale.length % itemsPerPage !== 0\r\n  let maxPage = Math.floor(nftsForSale.length / itemsPerPage)\r\n  if (needsExtraPage) {\r\n    maxPage += 1\r\n  }\r\n\r\n  const nftsOnCurrentPage = nftsForSale.slice((page - 1) * itemsPerPage, page * itemsPerPage)\r\n\r\n  const switchPage = (pageNumber: number) => {\r\n    setPage(pageNumber)\r\n  }\r\n\r\n  const loadMoreHandler = () => {\r\n    loadMore(priceSort)\r\n  }\r\n\r\n  const loadMoreButton = isFetchingMoreNfts ? (\r\n    <Flex width=\"96px\" justifyContent=\"center\">\r\n      <Spinner size={32} />\r\n    </Flex>\r\n  ) : (\r\n    <Button variant=\"primary\" scale=\"xs\" ml=\"12px\" onClick={loadMoreHandler}>\r\n      {t('Load more')}\r\n    </Button>\r\n  )\r\n\r\n  return (\r\n    <StyledCard hasManyPages={maxPage > 1}>\r\n      <Grid\r\n        flex=\"0 1 auto\"\r\n        gridTemplateColumns=\"34px 1fr 48px\"\r\n        alignItems=\"center\"\r\n        height=\"72px\"\r\n        px=\"24px\"\r\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\r\n      >\r\n        <SellIcon width=\"24px\" height=\"24px\" />\r\n        <Text bold>{t('For Sale (%num%)', { num: totalForSale.toLocaleString() })}</Text>\r\n        <UpdateIndicator />\r\n      </Grid>\r\n      {nftsOnCurrentPage.length > 0 ? (\r\n        <>\r\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\r\n            <StyledSortButton type=\"button\" onClick={togglePriceSort}>\r\n              <Flex alignItems=\"center\">\r\n                <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\r\n                  {t('Price')}\r\n                </Text>\r\n                {priceSort === 'asc' ? <ArrowUpIcon color=\"textSubtle\" /> : <ArrowDownIcon color=\"textSubtle\" />}\r\n              </Flex>\r\n            </StyledSortButton>\r\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\r\n              {t('Owner')}\r\n            </Text>\r\n          </TableHeading>\r\n          <Flex flex=\"1 1 auto\" flexDirection=\"column\" justifyContent=\"space-between\" height=\"100%\">\r\n            <ForSaleTableRows nftsForSale={nftsOnCurrentPage} />\r\n            <PageButtons>\r\n              <Arrow\r\n                onClick={() => {\r\n                  switchPage(page === 1 ? page : page - 1)\r\n                }}\r\n              >\r\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\r\n              {page === maxPage ? (\r\n                loadMoreButton\r\n              ) : (\r\n                <Arrow\r\n                  onClick={() => {\r\n                    switchPage(page === maxPage ? page : page + 1)\r\n                  }}\r\n                >\r\n                  <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\r\n                </Arrow>\r\n              )}\r\n            </PageButtons>\r\n          </Flex>\r\n        </>\r\n      ) : (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" height=\"200px\">\r\n          <Text>{t('No items for sale')}</Text>\r\n        </Flex>\r\n      )}\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default ForSaleTableCard\r\n","import React, { useState, useEffect, useMemo } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport sum from 'lodash/sum'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFetchByBunnyIdAndUpdate, useGetAllBunniesByBunnyId } from 'state/nftMarket/hooks'\r\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\nimport { PANCAKE_BUNNIES_UPDATE_FREQUENCY } from 'config'\r\nimport { useGetCollectionDistributionPB } from 'views/Nft/market/hooks/useGetCollectionDistribution'\r\nimport MainPancakeBunnyCard from './MainPancakeBunnyCard'\r\nimport ManagePancakeBunniesCard from './ManagePancakeBunniesCard'\r\nimport PropertiesCard from '../shared/PropertiesCard'\r\nimport DetailsCard from '../shared/DetailsCard'\r\nimport MoreFromThisCollection from '../shared/MoreFromThisCollection'\r\nimport ForSaleTableCard from './ForSaleTableCard'\r\nimport { pancakeBunniesAddress } from '../../../constants'\r\nimport { sortNFTsByPriceBuilder } from './ForSaleTableCard/utils'\r\nimport { SortType } from '../../../types'\r\nimport { TwoColumnsContainer } from '../shared/styles'\r\n\r\ninterface IndividualPancakeBunnyPageProps {\r\n  bunnyId: string\r\n}\r\n\r\nconst IndividualPancakeBunnyPage: React.FC<IndividualPancakeBunnyPageProps> = ({ bunnyId }) => {\r\n  const { account } = useWeb3React()\r\n  const [nothingForSaleBunny, setNothingForSaleBunny] = useState<NftToken>(null)\r\n  const allBunnies = useGetAllBunniesByBunnyId(bunnyId)\r\n  const [priceSort, setPriceSort] = useState<SortType>('asc')\r\n  const previousPriceSort = usePreviousValue(priceSort)\r\n  const { isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fetchMorePancakeBunnies } =\r\n    useFetchByBunnyIdAndUpdate(bunnyId)\r\n  const { fastRefresh } = useRefresh()\r\n  const isWindowVisible = useIsWindowVisible()\r\n  const bunniesSortedByPrice = orderBy(allBunnies, (nft) => parseFloat(nft.marketData.currentAskPrice))\r\n  const allBunniesFromOtherSellers = account\r\n    ? bunniesSortedByPrice.filter((bunny) => bunny.marketData.currentSeller !== account.toLowerCase())\r\n    : bunniesSortedByPrice\r\n  const cheapestBunny = bunniesSortedByPrice[0]\r\n  const cheapestBunnyFromOtherSellers = allBunniesFromOtherSellers[0]\r\n\r\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistributionPB()\r\n\r\n  useEffect(() => {\r\n    // Fetch first 30 NFTs on page load\r\n    // And then query every FETCH_NEW_NFTS_INTERVAL_MS in case some new (cheaper) NFTs were listed\r\n    const msSinceLastUpdate = Date.now() - latestPancakeBunniesUpdateAt\r\n    // Check for last update is here to prevent too many request due to fetchMorePancakeBunnies updating too often\r\n    // (it can't be reasonably wrapper in useCallback because the tokens are updated every time you call it, which is the whole point)\r\n    // Since fastRefresh is 10 seconds and FETCH_NEW_NFTS_INTERVAL_MS is 8 seconds it fires every 10 seconds\r\n    // The difference in 2 seconds is just to prevent some edge cases when request takes too long\r\n    if (msSinceLastUpdate > PANCAKE_BUNNIES_UPDATE_FREQUENCY && !isUpdatingPancakeBunnies && isWindowVisible) {\r\n      fetchMorePancakeBunnies(priceSort)\r\n    }\r\n  }, [\r\n    priceSort,\r\n    fetchMorePancakeBunnies,\r\n    isUpdatingPancakeBunnies,\r\n    latestPancakeBunniesUpdateAt,\r\n    fastRefresh,\r\n    isWindowVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    // Fetch most expensive items if user selects other sorting\r\n    if (previousPriceSort && previousPriceSort !== priceSort) {\r\n      fetchMorePancakeBunnies(priceSort)\r\n    }\r\n  }, [fetchMorePancakeBunnies, priceSort, previousPriceSort])\r\n\r\n  useEffect(() => {\r\n    const fetchBasicBunnyData = async () => {\r\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      setNothingForSaleBunny({\r\n        // In this case tokenId doesn't matter, this token can't be bought\r\n        tokenId: data[bunnyId].name,\r\n        name: data[bunnyId].name,\r\n        description: data[bunnyId].description,\r\n        collectionName: data[bunnyId].collection.name,\r\n        collectionAddress: pancakeBunniesAddress,\r\n        image: data[bunnyId].image,\r\n        attributes: [\r\n          {\r\n            traitType: 'bunnyId',\r\n            value: bunnyId,\r\n            displayType: null,\r\n          },\r\n        ],\r\n      })\r\n    }\r\n    // If bunny id has no listings on the market - get basic bunny info\r\n    if (!cheapestBunny) {\r\n      fetchBasicBunnyData()\r\n    }\r\n  }, [cheapestBunny, bunnyId])\r\n\r\n  const sortedNfts = useMemo(() => allBunnies.sort(sortNFTsByPriceBuilder({ priceSort })), [allBunnies, priceSort])\r\n\r\n  if (!cheapestBunny && !nothingForSaleBunny) {\r\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\r\n    // That would require tracking loading states and stuff...\r\n\r\n    // For now this if is used to show loading spinner while we're getting the data\r\n    return <PageLoader />\r\n  }\r\n\r\n  const togglePriceSort = () => {\r\n    setPriceSort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\r\n  }\r\n\r\n  const getBunnyIdCount = () => {\r\n    if (distributionData && !isFetchingDistribution) {\r\n      return distributionData[bunnyId]\r\n    }\r\n    return null\r\n  }\r\n\r\n  const getBunnyIdRarity = () => {\r\n    if (distributionData && !isFetchingDistribution) {\r\n      const total = sum(Object.values(distributionData))\r\n      return (distributionData[bunnyId] / total) * 100\r\n    }\r\n    return null\r\n  }\r\n\r\n  const properties = cheapestBunny?.attributes || nothingForSaleBunny?.attributes\r\n\r\n  const propertyRarity = { bunnyId: getBunnyIdRarity() }\r\n\r\n  return (\r\n    <Page>\r\n      <MainPancakeBunnyCard\r\n        cheapestNft={cheapestBunny}\r\n        cheapestNftFromOtherSellers={cheapestBunnyFromOtherSellers}\r\n        nothingForSaleBunny={nothingForSaleBunny}\r\n      />\r\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\r\n        <Flex flexDirection=\"column\" width=\"100%\">\r\n          <ManagePancakeBunniesCard bunnyId={bunnyId} lowestPrice={cheapestBunny?.marketData?.currentAskPrice} />\r\n          <PropertiesCard properties={properties} rarity={propertyRarity} />\r\n          <DetailsCard\r\n            contractAddress={pancakeBunniesAddress}\r\n            ipfsJson={cheapestBunny?.marketData?.metadataUrl}\r\n            rarity={propertyRarity?.bunnyId}\r\n            count={getBunnyIdCount()}\r\n          />\r\n        </Flex>\r\n        <ForSaleTableCard\r\n          nftsForSale={sortedNfts}\r\n          bunnyId={bunnyId}\r\n          totalForSale={allBunnies.length}\r\n          loadMore={fetchMorePancakeBunnies}\r\n          priceSort={priceSort}\r\n          togglePriceSort={togglePriceSort}\r\n          isFetchingMoreNfts={isUpdatingPancakeBunnies}\r\n        />\r\n      </TwoColumnsContainer>\r\n      <MoreFromThisCollection\r\n        collectionAddress={pancakeBunniesAddress}\r\n        currentTokenName={cheapestBunny?.name || nothingForSaleBunny?.name}\r\n      />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default IndividualPancakeBunnyPage\r\n","type sortBuilder = {\r\n  priceSort: string\r\n}\r\n\r\nexport const sortNFTsByPriceBuilder =\r\n  ({ priceSort }: sortBuilder) =>\r\n  (nftA, nftB) => {\r\n    const nftPriceA = Number(nftA.marketData.currentAskPrice) ?? 0\r\n    const nftPriceB = Number(nftB.marketData.currentAskPrice) ?? 0\r\n\r\n    return priceSort === 'asc' ? nftPriceA - nftPriceB : nftPriceB - nftPriceA\r\n  }\r\n","import React from 'react'\r\nimport { Flex, Box, Card, CardBody, Text, Button, BinanceIcon, Skeleton, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\r\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport { nftsBaseUrl } from '../../../constants'\r\nimport { RoundedImage, Container, CollectionLink } from '../shared/styles'\r\n\r\ninterface MainNFTCardProps {\r\n  nft: NftToken\r\n  isOwnNft: boolean\r\n  nftIsProfilePic: boolean\r\n}\r\n\r\nconst MainNFTCard: React.FC<MainNFTCardProps> = ({ nft, isOwnNft, nftIsProfilePic }) => {\r\n  const { t } = useTranslation()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n\r\n  const currentAskPriceAsNumber = nft.marketData?.currentAskPrice ? parseFloat(nft.marketData.currentAskPrice) : 0\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, currentAskPriceAsNumber)\r\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\r\n  const [onPresentSellModal] = useModal(\r\n    <SellModal variant={nft.marketData?.isTradable ? 'edit' : 'sell'} nftToSell={nft} />,\r\n  )\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  const ownerButtons = (\r\n    <Flex flexDirection={['column', 'column', 'row']}>\r\n      <Button\r\n        disabled={nftIsProfilePic}\r\n        minWidth=\"168px\"\r\n        mr=\"16px\"\r\n        width={['100%', null, 'max-content']}\r\n        mt=\"24px\"\r\n        onClick={onPresentSellModal}\r\n      >\r\n        {nft.marketData?.isTradable ? t('Adjust price') : t('List for sale')}\r\n      </Button>\r\n      {!nft.marketData?.isTradable && (\r\n        <Button\r\n          minWidth=\"168px\"\r\n          variant=\"secondary\"\r\n          width={['100%', null, 'max-content']}\r\n          mt=\"24px\"\r\n          onClick={onEditProfileModal}\r\n        >\r\n          {nftIsProfilePic ? t('Change Profile Pic') : t('Set as Profile Pic')}\r\n        </Button>\r\n      )}\r\n    </Flex>\r\n  )\r\n\r\n  return (\r\n    <Card mb=\"40px\">\r\n      <CardBody>\r\n        <Container flexDirection={['column-reverse', null, 'row']}>\r\n          <Flex flex=\"2\">\r\n            <Box>\r\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nft.collectionAddress}`}>\r\n                {nft.collectionName}\r\n              </CollectionLink>\r\n              <Text fontSize=\"40px\" bold mt=\"12px\">\r\n                {nft.name}\r\n              </Text>\r\n              {nft.description && <Text mt={['16px', '16px', '48px']}>{t(nft.description)}</Text>}\r\n              <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\r\n                {t('Price')}\r\n              </Text>\r\n              {currentAskPriceAsNumber > 0 ? (\r\n                <Flex alignItems=\"center\" mt=\"8px\">\r\n                  <BinanceIcon width={18} height={18} mr=\"4px\" />\r\n                  <Text fontSize=\"24px\" bold mr=\"4px\">\r\n                    {nft.marketData.currentAskPrice}\r\n                  </Text>\r\n                  {bnbBusdPrice ? (\r\n                    <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\r\n                      minimumFractionDigits: 2,\r\n                      maximumFractionDigits: 2,\r\n                    })} USD)`}</Text>\r\n                  ) : (\r\n                    <Skeleton width=\"64px\" />\r\n                  )}\r\n                </Flex>\r\n              ) : (\r\n                <Text>{t('Not for sale')}</Text>\r\n              )}\r\n              {nftIsProfilePic && (\r\n                <Text color=\"failure\">\r\n                  {t(\r\n                    'This NFT is your profile picture, you must change it to some other NFT if you want to sell this one.',\r\n                  )}\r\n                </Text>\r\n              )}\r\n              {isOwnNft && ownerButtons}\r\n              {!isOwnNft && (\r\n                <Button\r\n                  minWidth=\"168px\"\r\n                  disabled={!nft.marketData?.isTradable}\r\n                  mr=\"16px\"\r\n                  width={['100%', null, 'max-content']}\r\n                  mt=\"24px\"\r\n                  onClick={onPresentBuyModal}\r\n                >\r\n                  {t('Buy')}\r\n                </Button>\r\n              )}\r\n            </Box>\r\n          </Flex>\r\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\">\r\n            <RoundedImage src={nft.image.thumbnail} width={440} height={440} />\r\n          </Flex>\r\n        </Container>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default MainNFTCard\r\n","import React from 'react'\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Grid,\r\n  Text,\r\n  CogIcon,\r\n  SellIcon,\r\n  WalletFilledIcon,\r\n  CameraIcon,\r\n  BinanceIcon,\r\n  Skeleton,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableCard from '../shared/ExpandableCard'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport ProfileNftModal from '../../../components/ProfileNftModal'\r\nimport { SmallRoundedImage, CollectibleRowContainer } from '../shared/styles'\r\n\r\nconst LocationColors = {\r\n  [NftLocation.FORSALE]: 'failure',\r\n  [NftLocation.WALLET]: 'secondary',\r\n  [NftLocation.PROFILE]: 'textSubtle',\r\n}\r\n\r\nconst LocationIcons = {\r\n  [NftLocation.FORSALE]: SellIcon,\r\n  [NftLocation.WALLET]: WalletFilledIcon,\r\n  [NftLocation.PROFILE]: CameraIcon,\r\n}\r\n\r\ninterface CollectibleRowProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft }) => {\r\n  const { t } = useTranslation()\r\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\r\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\r\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\r\n  return (\r\n    <CollectibleRowContainer\r\n      gridTemplateColumns=\"96px 1fr\"\r\n      px=\"16px\"\r\n      pb=\"8px\"\r\n      my=\"16px\"\r\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\r\n    >\r\n      <SmallRoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\r\n      <Grid gridTemplateColumns=\"1fr 1fr\">\r\n        <Text bold>{nft.name}</Text>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n          {nft.collectionName}\r\n        </Text>\r\n        {nft.location === NftLocation.FORSALE ? (\r\n          <>\r\n            <Text small color=\"textSubtle\">\r\n              {t('Your price')}\r\n            </Text>\r\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\r\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\r\n              <Text small>{nft.marketData.currentAskPrice}</Text>\r\n            </Flex>\r\n          </>\r\n        ) : (\r\n          <Text small color=\"textDisabled\">\r\n            {t('Not on sale')}\r\n          </Text>\r\n        )}\r\n      </Grid>\r\n    </CollectibleRowContainer>\r\n  )\r\n}\r\n\r\ninterface CollectibleByLocationProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst CollectibleByLocation: React.FC<CollectibleByLocationProps> = ({ nft }) => {\r\n  const { t } = useTranslation()\r\n  const IconComponent = LocationIcons[nft.location]\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\r\n        <IconComponent color={LocationColors[nft.location]} width=\"24px\" height=\"24px\" />\r\n        <Text display=\"inline\" bold color={LocationColors[nft.location]}>\r\n          {t(nft.location)}\r\n        </Text>\r\n      </Grid>\r\n      <CollectibleRow key={nft.tokenId} nft={nft} />\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface ManageNFTsCardProps {\r\n  nft?: NftToken\r\n  isLoading: boolean\r\n  isOwnNft: boolean\r\n}\r\n\r\nconst ManageNFTsCard: React.FC<ManageNFTsCardProps> = ({ nft, isLoading, isOwnNft }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const hasThisNft = isOwnNft && nft\r\n\r\n  const content = (\r\n    <Box pt=\"16px\">\r\n      {!account && (\r\n        <Flex mb=\"16px\" justifyContent=\"center\">\r\n          <ConnectWalletButton />\r\n        </Flex>\r\n      )}\r\n      {account && isLoading && (\r\n        <Box px=\"16px\" pb=\"8px\">\r\n          <Skeleton mb=\"8px\" />\r\n          <Skeleton mb=\"8px\" />\r\n          <Skeleton mb=\"8px\" />\r\n        </Box>\r\n      )}\r\n      {!isLoading && !hasThisNft && (\r\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\r\n          {t('You don’t have this item.')}\r\n        </Text>\r\n      )}\r\n      {!isLoading && hasThisNft && <CollectibleByLocation nft={nft} />}\r\n    </Box>\r\n  )\r\n  return <ExpandableCard title={t('Manage Yours')} icon={<CogIcon width=\"24px\" height=\"24px\" />} content={content} />\r\n}\r\n\r\nexport default ManageNFTsCard\r\n","import { useEffect, useState } from 'react'\r\nimport { useErc721CollectionContract } from 'hooks/useContract'\r\nimport { NftToken } from 'state/nftMarket/types'\r\n\r\nconst NOT_ON_SALE_SELLER = '0x0000000000000000000000000000000000000000'\r\n\r\nconst useNftOwner = (nft: NftToken) => {\r\n  const [owner, setOwner] = useState(null)\r\n  const [isLoadingOwner, setIsLoadingOwner] = useState(true)\r\n  const collectionContract = useErc721CollectionContract(nft.collectionAddress)\r\n  const currentSeller = nft.marketData?.currentSeller\r\n  const { tokenId } = nft\r\n\r\n  useEffect(() => {\r\n    const getOwner = async () => {\r\n      try {\r\n        const tokenOwner = await collectionContract.ownerOf(tokenId)\r\n        setOwner(tokenOwner)\r\n      } catch (error) {\r\n        setOwner(null)\r\n      } finally {\r\n        setIsLoadingOwner(false)\r\n      }\r\n    }\r\n\r\n    if (currentSeller && currentSeller !== NOT_ON_SALE_SELLER) {\r\n      setOwner(currentSeller)\r\n      setIsLoadingOwner(false)\r\n    } else {\r\n      getOwner()\r\n    }\r\n  }, [currentSeller, collectionContract, tokenId])\r\n\r\n  return { owner, isLoadingOwner }\r\n}\r\n\r\nexport default useNftOwner\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Card, Grid, SellIcon, Text, useModal, Box, BinanceIcon, Skeleton, Button } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport useNftOwner from 'views/Nft/market/hooks/useNftOwner'\r\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport ProfileCell from '../../../components/ProfileCell'\r\nimport { ButtonContainer, TableHeading } from '../shared/styles'\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n  & > div:first-child {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nconst OwnerRow = styled(Grid)`\r\n  grid-template-columns: 2fr 2fr 1fr;\r\n  grid-row-gap: 16px;\r\n  margin-top: 16px;\r\n  margin-bottom: 8px;\r\n  align-items: center;\r\n`\r\n\r\ninterface OwnerCardProps {\r\n  nft: NftToken\r\n  isOwnNft: boolean\r\n  nftIsProfilePic: boolean\r\n}\r\n\r\nconst OwnerCard: React.FC<OwnerCardProps> = ({ nft, isOwnNft, nftIsProfilePic }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n\r\n  const { owner, isLoadingOwner } = useNftOwner(nft)\r\n\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData?.currentAskPrice))\r\n\r\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\r\n  const [onPresentAdjustPriceModal] = useModal(\r\n    <SellModal variant={nft.marketData?.isTradable ? 'edit' : 'sell'} nftToSell={nft} />,\r\n  )\r\n\r\n  return (\r\n    <StyledCard>\r\n      <Grid\r\n        flex=\"0 1 auto\"\r\n        gridTemplateColumns=\"34px 1fr\"\r\n        alignItems=\"center\"\r\n        height=\"72px\"\r\n        px=\"24px\"\r\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\r\n      >\r\n        <SellIcon width=\"24px\" height=\"24px\" />\r\n        <Text bold>{t('Owner')}</Text>\r\n      </Grid>\r\n      {owner && (\r\n        <>\r\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\r\n            <Flex alignItems=\"center\">\r\n              <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\r\n                {t('Price')}\r\n              </Text>\r\n            </Flex>\r\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\r\n              {t('Owner')}\r\n            </Text>\r\n          </TableHeading>\r\n          <OwnerRow>\r\n            <Box pl=\"24px\">\r\n              {nft.marketData?.isTradable ? (\r\n                <>\r\n                  <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\r\n                    <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\r\n                    <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 3)}</Text>\r\n                  </Flex>\r\n                  {bnbBusdPrice ? (\r\n                    <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                      {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\r\n                    </Text>\r\n                  ) : (\r\n                    <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <Flex alignItems=\"center\" height=\"100%\">\r\n                  <Text>{t('Not for sale')}</Text>\r\n                </Flex>\r\n              )}\r\n            </Box>\r\n            <Box>\r\n              <Flex width=\"max-content\" alignItems=\"center\">\r\n                <ProfileCell accountAddress={owner.toLowerCase()} />\r\n              </Flex>\r\n            </Box>\r\n            <ButtonContainer>\r\n              {isOwnNft ? (\r\n                <Button\r\n                  disabled={nftIsProfilePic}\r\n                  scale=\"sm\"\r\n                  variant=\"secondary\"\r\n                  maxWidth=\"128px\"\r\n                  onClick={onPresentAdjustPriceModal}\r\n                >\r\n                  {nft.marketData?.isTradable ? t('Manage') : t('Sell')}\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  disabled={!nft.marketData?.isTradable}\r\n                  scale=\"sm\"\r\n                  variant=\"secondary\"\r\n                  maxWidth=\"128px\"\r\n                  onClick={onPresentBuyModal}\r\n                >\r\n                  {t('Buy')}\r\n                </Button>\r\n              )}\r\n            </ButtonContainer>\r\n          </OwnerRow>\r\n        </>\r\n      )}\r\n      {isLoadingOwner && <Skeleton />}\r\n      {!isLoadingOwner && !owner && (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" padding=\"24px\">\r\n          <Text>{t('Owner information is not available for this item')}</Text>\r\n        </Flex>\r\n      )}\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default OwnerCard\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport sum from 'lodash/sum'\r\nimport Page from 'components/Layout/Page'\r\nimport { getNftApi, getNftsMarketData } from 'state/nftMarket/helpers'\r\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport MainNFTCard from './MainNFTCard'\r\nimport ManageNFTsCard from './ManageNFTsCard'\r\nimport useFetchUserNfts from '../../../Profile/hooks/useFetchUserNfts'\r\nimport { TwoColumnsContainer } from '../shared/styles'\r\nimport PropertiesCard from '../shared/PropertiesCard'\r\nimport DetailsCard from '../shared/DetailsCard'\r\nimport useGetCollectionDistribution from '../../../hooks/useGetCollectionDistribution'\r\nimport OwnerCard from './OwnerCard'\r\nimport MoreFromThisCollection from '../shared/MoreFromThisCollection'\r\n\r\ninterface IndividualNFTPageProps {\r\n  collectionAddress: string\r\n  tokenId: string\r\n}\r\n\r\nconst IndividualNFTPage: React.FC<IndividualNFTPageProps> = ({ collectionAddress, tokenId }) => {\r\n  const [nft, setNft] = useState<NftToken>(null)\r\n  const [isOwnNft, setIsOwnNft] = useState(false)\r\n\r\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistribution(collectionAddress)\r\n\r\n  const { account } = useWeb3React()\r\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\r\n  useFetchUserNfts()\r\n\r\n  useEffect(() => {\r\n    const fetchNftData = async () => {\r\n      const metadata = await getNftApi(collectionAddress, tokenId)\r\n      const [marketData] = await getNftsMarketData({ collection: collectionAddress.toLowerCase(), tokenId }, 1)\r\n      setNft({\r\n        tokenId,\r\n        collectionAddress,\r\n        collectionName: metadata.collection.name,\r\n        name: metadata.name,\r\n        description: metadata.description,\r\n        image: metadata.image,\r\n        attributes: metadata.attributes,\r\n        marketData,\r\n      })\r\n    }\r\n    if (userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\r\n      const nftOwnedByConnectedUser = userNfts.find(\r\n        (userNft) =>\r\n          userNft.collectionAddress.toLowerCase() === collectionAddress.toLowerCase() && userNft.tokenId === tokenId,\r\n      )\r\n      if (nftOwnedByConnectedUser) {\r\n        // If user is the owner we already have all needed data available\r\n        setNft(nftOwnedByConnectedUser)\r\n        setIsOwnNft(true)\r\n      } else {\r\n        // reset to defaults\r\n        setIsOwnNft(false)\r\n        // Get metadata and market data separately if connected user is not the owner\r\n        fetchNftData()\r\n      }\r\n    }\r\n    if (!account) {\r\n      fetchNftData()\r\n    }\r\n  }, [userNfts, collectionAddress, tokenId, userNftsInitializationState, account])\r\n\r\n  if (!nft) {\r\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\r\n    // That would require tracking loading states and stuff...\r\n\r\n    // For now this if is used to show loading spinner while we're getting the data\r\n    return <PageLoader />\r\n  }\r\n\r\n  const properties = nft.attributes\r\n\r\n  const userProfilePicture = userNfts.find((userNft) => userNft.location === NftLocation.PROFILE)\r\n  const nftIsProfilePic = userProfilePicture\r\n    ? nft.tokenId === userProfilePicture.tokenId && nft.collectionAddress === userProfilePicture.collectionAddress\r\n    : false\r\n\r\n  const getAttributesRarity = () => {\r\n    if (distributionData && !isFetchingDistribution) {\r\n      return Object.keys(distributionData).reduce((rarityMap, traitType) => {\r\n        const total = sum(Object.values(distributionData[traitType]))\r\n        const nftAttributeValue = nft.attributes.find((attribute) => attribute.traitType === traitType)?.value\r\n        const count = distributionData[traitType][nftAttributeValue]\r\n        const rarity = (count / total) * 100\r\n        return {\r\n          ...rarityMap,\r\n          [traitType]: rarity,\r\n        }\r\n      }, {})\r\n    }\r\n    return {}\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <MainNFTCard nft={nft} isOwnNft={isOwnNft} nftIsProfilePic={nftIsProfilePic} />\r\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\r\n        <Flex flexDirection=\"column\" width=\"100%\">\r\n          <ManageNFTsCard\r\n            nft={nft}\r\n            isOwnNft={isOwnNft}\r\n            isLoading={userNftsInitializationState !== UserNftInitializationState.INITIALIZED}\r\n          />\r\n          <PropertiesCard properties={properties} rarity={getAttributesRarity()} />\r\n          <DetailsCard contractAddress={collectionAddress} ipfsJson={nft?.marketData?.metadataUrl} />\r\n        </Flex>\r\n        <OwnerCard nft={nft} isOwnNft={isOwnNft} nftIsProfilePic={nftIsProfilePic} />\r\n      </TwoColumnsContainer>\r\n      <MoreFromThisCollection collectionAddress={collectionAddress} currentTokenName={nft.name} />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default IndividualNFTPage\r\n","import React from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { pancakeBunniesAddress } from '../../constants'\r\nimport IndividualPancakeBunnyPage from './PancakeBunnyPage'\r\nimport IndividualNFTPage from './OneOfAKindNftPage'\r\n\r\nconst IndividualNFTPageRouter = () => {\r\n  // For PancakeBunnies tokenId in url is really bunnyId\r\n  const { collectionAddress, tokenId } = useParams<{ collectionAddress: string; tokenId: string }>()\r\n\r\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n  if (isPBCollection) {\r\n    return <IndividualPancakeBunnyPage bunnyId={tokenId} />\r\n  }\r\n\r\n  return <IndividualNFTPage collectionAddress={collectionAddress} tokenId={tokenId} />\r\n}\r\n\r\nexport default IndividualNFTPageRouter\r\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","import { useEffect, useState } from 'react'\r\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\r\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\ninterface State {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistribution['data']\r\n}\r\n\r\nconst useGetCollectionDistribution = (collectionAddress: string) => {\r\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setState])\r\n\r\n  return state\r\n}\r\n\r\ninterface StatePB {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistributionPB['data']\r\n}\r\n\r\nexport const useGetCollectionDistributionPB = () => {\r\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [setState])\r\n\r\n  return state\r\n}\r\n\r\nexport default useGetCollectionDistribution\r\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","import { useState, useEffect } from 'react'\r\nimport {\r\n  getAllPancakeBunniesLowestPrice,\r\n  getAllPancakeBunniesRecentUpdatedAt,\r\n  getNftsFromCollectionApi,\r\n} from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\r\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\r\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\r\n\r\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\r\n\r\n  useEffect(() => {\r\n    const fetchPancakeBunnies = async () => {\r\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\r\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\r\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\r\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\r\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      const bunnyIds = Object.keys(data)\r\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\r\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\r\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\r\n        return {\r\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\r\n          tokenId: data[bunnyId].name,\r\n          name: data[bunnyId].name,\r\n          description: data[bunnyId].description,\r\n          collectionAddress: pancakeBunniesAddress,\r\n          collectionName: data[bunnyId].collection.name,\r\n          image: data[bunnyId].image,\r\n          attributes: [\r\n            {\r\n              traitType: 'bunnyId',\r\n              value: bunnyId,\r\n              displayType: null,\r\n            },\r\n          ],\r\n          meta: {\r\n            currentAskPrice: lowestPrices[bunnyId],\r\n            updatedAt: latestUpdates[bunnyId],\r\n          },\r\n        }\r\n      })\r\n      setAllPancakeBunnyNfts(allBunnies)\r\n    }\r\n    if (isPBCollection && !allPancakeBunnyNfts) {\r\n      fetchPancakeBunnies()\r\n    }\r\n  }, [isPBCollection, allPancakeBunnyNfts])\r\n\r\n  return allPancakeBunnyNfts\r\n}\r\n\r\nexport default useAllPancakeBunnyNfts\r\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n"],"sourceRoot":""}